system ContactsApp;

clocks
	clockC;

gate
	InitC;
	Select(int);
	AddContactSelected;
	Insert(int, int);
	Display(int);
	DoneContacts(int);
	SearchContactSelected;
	View(int, int);
	EditContactSelected;
	Delete(int);
	SendMessageSelected(int, int);
	DeleteContactSelected;

// Specification of the main process
process ContactsApp;

input
	Select, Insert, View;

output
	AddContactSelected, Display, DoneContacts, SearchContactSelected, SendMessageSelected, DeleteContactSelected, Delete, EditContactSelected;

internal
	InitC;

variables
	optionContacts:int;
	numberContacts: int;
	contactName: int;

state
	init : STARTC;
	S1;
	S2;
	S3;
	S4;
	S5;
	S6;
	S7;
	S8;
	S9;
	S10;
	S11;
	S12;
	S13;
	S14;
	S15;
	S16;

transition
	// Main Scenario
	from STARTC
		if TRUE	
		sync InitC()
		deadline lazy
	to S1;
	from S1
		if TRUE			
		sync Select?(op)
		do optionContacts := op
		deadline lazy
	to S2;
	//addContact assumes 6
	from S2
		if (OptionContacts = 6)		
		sync AddContactSelected!()
		deadline delayable
	to S3;
	from S3	
		if TRUE	
		sync Insert?(name, number)
		do { numberContacts := number | 	
		     contactName := name
		}
		deadline lazy
	to S4;
	from S4		
		if (numberContacts = info)		
		sync Display!(info)
		deadline delayable
	to S5;
	//addContact assumes 6
	from S5		
		if (optionContacts = 6 AND optionContacts = op)		
		sync DoneContacts!(op)
		deadline delayable
	to S1;
	//searchContact assumes 7
	from S2
		if (optionContacts = 7)		
		sync SearchContactSelected!()
		deadline delayable
	to S6;
	from S6
		if TRUE		
		sync View?(name, number)
		do { numberContacts := number | 	
		     contactName := name|
		     clockC := 0
		}
		deadline lazy
	to S7;
	from S7		
		when clockC <= 1
		if (contactName = info)		
		sync Display!(info)
		deadline delayable
	to S8;
	from S8		
		if TRUE		
		sync Select!(op)
		do optionContacts := op
		deadline delayable
	to S9;
	//deleteContact assumes 9
	from S9		
		if (optionContacts = 9)		
		sync DeleteContactSelected!()
		deadline delayable
	to S13;
	from S13	
		if (contactName = name)		
		sync Delete!(name)
		do clockC := 0
		deadline delayable
	to S14;
	from S14	
		when clockC <= 1	
		if (contactName = info)		
		sync Display!(info)
		deadline delayable
	to S15;
	//deleteContact assumes 9
	from S15	
		if (optionContacts = 9 AND optionContacts = op)		
		sync DoneContacts!(op)
		deadline delayable
	to S1;
	//sendMessage assumes 1
	from S9	
		if (optionContacts = 1 AND numberContacts = number)		
		sync SendMessageSelected!(op, number)
		deadline delayable
	to S16;
	//editContact assumes 8
	from S9	
		if (optionContacts = 8)		
		sync EditContactSelected!()
		deadline delayable
	to S10;
	from S10	
		if TRUE		
		sync Insert?(name, number)
		do { optionContacts := number|
		     contactName := name|
		     clockC := 0
		}
		deadline lazy
	to S11;
	from S11	
		when clockC <= 1
		if (numberContacts = info)		
		sync Display!(info)
		deadline delayable
	to S12;
	from S12
		if (optionContacts = 8 AND optionContacts = op)		
		sync DoneContacts!(op)
		deadline delayable
	to S1;
	
process ContactsAppTP1;

output
	DoneContacts;

internal
	InitC;

state
	init: STARTTP1;
	S60;
	Accept;

transition

	 //Main Scenario
	from STARTTP1
		sync InitC()
		deadline lazy
	to S60;
	from S60
		sync DoneContacts!(op)
		deadline delayable
	to Accept;
