system MouseInterrupted;

clocks
	clockM, clockI;

gate
	InitM;
	InitI;
	Click(int);
	SimpleClick(int);
	DoubleClick(int);
	Error(int);
	DisableDriver;
	Shutdown;	

// Specification of the main process
process MouseInterrupted;

input
	Click;

output
	SimpleClick, DoubleClick, Error;

internal
	InitM;

variables
	coordinateM: int;

state
	init : STARTM;
	S0;
	S1;
	S2;
	S3;

transition

	// Main Scenario
	from STARTM
		sync InitM()
	to S0;
	from S0	
		if TRUE			
		sync Click?(position)
		do coordinateM := position
		deadline lazy
	to S1;
	from S1
		when clockM <= 2			
		if TRUE
		sync Click?(position)
		do coordinateM := position
		deadline lazy
	to S2;	
	from S2
		if (coordinateM = position)		
		sync DoubleClick!(position)
		do clockM := 0
		deadline delayable
	to S0;	
	from S1
		when clockM > 2
		if (coordinateM = position)		
		sync SimpleClick!(position)
		do clockM := 0
		deadline eager
	to S0;
	from S1
		if (coordinateM = position)		
		sync Error!(position)
		deadline lazy
	to S3;

process Interruption;

input
	Error;

output
	DisableDriver, Shutdown;

internal
	InitI;

variables
	coordinateI: int;

state
	init : STARTI;
	S5;
	S6;
	S7;
	S8;

transition

	// Main Scenario
	from STARTI
		sync InitI()
	to S5;
	from S5
		sync Error?(position)
		do {coordinateI := position | 
			clockI := 0}
		deadline lazy
	to S6;
	from S6	
		sync DisableDriver!()
		do coordinateI := 0
		deadline lazy
	to S7;
	from S7	
		when clockI <= 3	
		if TRUE	
		sync Shutdown!()
		deadline lazy
	to S8;

process MouseInterruptedTP1;
input
	Click;

output
	Error, Shutdown;

internal
	InitM;

state
	init: START;
	S20;
	S21;
	S22;
	Accept;

transition
	// Main Scenario
	from START
		sync InitM()
	to S20;
	from S20
		sync Click?(position)
	to S21;
	from S21
		sync Error!(position)
	to S22;
	from S22
		sync Shutdown!()
	to Accept;

process MouseInterruptedTP2;

output
	Error, Shutdown, SimpleClick;

internal
	InitM;

state
	init: START;
	S20;
	S21;
	S22;
	Accept;

transition
	// Main Scenario
	from START
		sync InitM()
	to S20;
	from S20
		sync SimpleClick!(position)
	to S21;
	from S21
		sync Error!(position)
	to S22;
	from S22
		sync Shutdown!()
	to Accept;

process MouseInterruptedTP3;

output
	Error, Shutdown, DoubleClick;

internal
	InitM;

state
	init: START;
	S20;
	S21;
	S22;
	Accept;

transition
	// Main Scenario
	from START
		sync InitM()
	to S20;
	from S20
		sync DoubleClick!(position)
	to S21;
	from S21
		sync Error!(position)
	to S22;
	from S22
		sync Shutdown!()
	to Accept;

