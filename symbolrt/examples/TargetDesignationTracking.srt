system TargetDesignationTracking;

clocks
	clockTD, clockTT;

gate
	InitTD;
	InitTT;
	SelectTD(int, int);
	Undesignate(int);
	ChangeModeRadar;
	AircraftPosition(int, int, int);
	TargetPosition(int, int, int);
	Track(int);
	ChangeModeHUD;
	ReticlePositionHUDIn(int, int, int);
	Designate(int);
	ReticlePositionHUDOut(int, int, int);
	FinishTargetDesignation(int, int);
	FinishTargetTracking(int);
	ReticlePositionHOTAS(int, int, int);
	Update(int, int, int);

// Specification of the main process
process TargetDesignation;

input
	SelectTD, AircraftPosition, ReticlePositionHUDIn;

output
	ChangeModeRadar, TargetPosition, ChangeModeHUD, ReticlePositionHUDOut, Designate, FinishTargetDesignation, Undesignate;

internal
	InitTD;

variables
	modeTD: int;
	azimuthTD: int;
	elevationTD: int;
	rangeTD: int;
	targetTD: int;

state
	init : STARTTD;
	S9;
	S10;
	S11;
	S12;
	S13;
	S14;
	S15;
	S16;
	S17;
	S18;

transition

	// Main Scenario
	from STARTTD
		sync InitTD()
		deadline lazy
	to S9;
	from S9
		sync SelectTD?(op, info)
		do { modeTD := op|
		     targetTD := info
		}
		deadline lazy
	to S10;
         //radarDesignation assumes 3
	from S10
		if modeTD = 3		
		sync ChangeModeRadar!()
		deadline lazy
	to S11;
	from S11	
		sync AircraftPosition?(r, a, e)
		do { rangeTD := r | 	
		     azimuthTD := a | 
		     elevationTD := e
		}
	deadline lazy
	to S12;
	from S12		
		if (rangeTD = r AND azimuthTD = a AND elevationTD = e)		
		sync TargetPosition!(r, a, e)
		deadline lazy
	to S13;
	from S13		
		when clockTD <= 200
		if (targetTD = info)		
		sync Designate!(info)
		deadline lazy
	to S17;
	//undesignation target assumes 1
	from S10
		if (modeTD = 1 AND targetTD = info)		
		sync Undesignate!(info)
		deadline lazy
	to S10;
	//HUDDesignation assumes 2
	from S10
		if modeTD = 2		
		sync ChangeModeHUD!()
		deadline lazy
	to S14;
	from S14		
		sync ReticlePositionHUDIn?(r, a, e)
		do { azimuthTD := a |
		     rangeTD := r | 
		     elevationTD := e
		}
		deadline lazy
	to S15;
	from S15		
		when clockTD <= 200		
		if (targetTD = info)		
		sync Designate!(info)
		deadline lazy
	to S16;
	from S16		
		if (azimuthTD = a AND elevationTD = e AND rangeTD = r)		
		sync ReticlePositionHUDOut!(r, a, e)
		deadline lazy
	to S17;
	from S17		
		if (modeTD = op AND targetTD = info)		
		sync FinishTargetDesignation!(op, info)
		deadline lazy
	to S18;	

process TargetTracking;

input
	AircraftPosition, FinishTargetDesignation, ReticlePositionHOTAS;	

output
	ChangeModeRadar, ChangeModeHUD, ReticlePositionHUDOut, FinishTargetTracking, Update, Track;

internal
	InitTT;

variables
	modeTT: int;
	azimuthTT: int;
	elevationTT: int;
	rangeTT: int;
	targetTT:int;

state
	init : STARTTT;
	S21;
	S22;
	S23;
	S24;
	S25;
	S26;
	S27;
	S28;
	S29;

transition
	// Main Scenario
	from STARTTT
		sync InitTT()
		deadline lazy
	to S21;
	from S21
		if (TRUE)			
		sync FinishTargetDesignation?(op, info)
		do { modeTT := op| 	
		     clockTT := 0| 
		     targetTT := info
		}
		deadline lazy
	to S22;
	//radarDesignation assumes 3
	from S22
		if (modeTT = 3)		
		sync ChangeModeRadar!()
		deadline lazy
	to S23;
	from S23		
		sync AircraftPosition?(r, a, e)
		do { rangeTT := r | 	
		     azimuthTT := a | 
		     elevationTT := e
		}
		deadline lazy
	to S25;
	//HUDDesignation assumes 2
	from S22
		if (modeTT = 2)		
		sync ChangeModeHUD!()
		deadline lazy
	to S24;
	from S24	
		sync ReticlePositionHOTAS?(r, a, e)
		do { rangeTT := r | 	
		     azimuthTT := a | 
		     elevationTT := e
		}
		deadline lazy
	to S25;
	from S25		
		if (targetTT = info)		
		sync Track!(info)
		deadline lazy
	to S26;
	from S26		
		if (rangeTT = r AND azimuthTT = a AND elevationTT = e)		
		sync ReticlePositionHUDOut!(r, a, e)
		deadline lazy
	to S27;
	from S27
		when clockTT <= 40		
		if (rangeTT = r AND azimuthTT = a AND elevationTT = e)		
		sync Update!(r, a, e)
		deadline lazy
	to S28;
	from S28		
		if (modeTT = op)		
		sync FinishTargetTracking!(op)
		deadline lazy
	to S29;

	
process TargetDesignationTrackingTP1;

output
	FinishTargetDesignation, FinishTargetTracking;
	

internal
	InitTD;

state
	init: STARTTD;
	S60;
	S61;
	Accept;

transition

	 //Main Scenario
	from STARTTD
		sync InitTD()
		deadline lazy
	to S60;
	from S60
		sync FinishTargetDesignation!(op, info)
		deadline lazy
	to S61;
	from S61
		sync FinishTargetTracking!(op)
		deadline lazy
	to Accept;

process TargetDesignationTrackingTP2;

output
	FinishTargetDesignation;
	

internal
	InitTD;

state
	init: STARTTD;
	S60;
	Accept;

transition

	 //Main Scenario
	from STARTTD
		sync InitTD()
		deadline lazy
	to S60;
	from S60
		sync FinishTargetDesignation!(op, info)
		deadline lazy
	to Accept;
