/* Generated By:JavaCC: Do not edit this line. TranslationUnit.java */
package br.edu.ufcg.symbolrt.compiler.parser;

import java.io.BufferedInputStream;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.LinkedList;

import br.edu.ufcg.symbolrt.compiler.synthesis.SynthesisUnit;
import br.edu.ufcg.symbolrt.compiler.parser.base.*;
import br.edu.ufcg.symbolrt.util.Constants;

/**
 * <code>TranslationUnit</code> Class. <br>
 * This class is responsible for syntactical, lexical and semantics analysis.<br>
 * In order to trigger the translation process, call
 * {@link TranslationUnit#init(java.io.BufferedInputStream)
 *
 * @author Jeanderson Barros Candido ( <a
 *         href="mailto:jbc.ufcg@gmail.com"
 *         >jbc.ufcg@gmail.com</a> )
 * 
 * @version 1.0 <br>
 *          SYmbolic Model-Based test case generation toOL for Real-Time systems
 *          (SYMBOLRT) <br>
 *          (C) Copyright 2010-2012 Federal University of Campina Grande (UFCG) <br>
 *          <a
 *          href="https://sites.google.com/a/computacao.ufcg.edu.br/symbolrt">
 *          https://sites.google.com/a/computacao.ufcg.edu.br/symbolrt</a>
 */
public class TranslationUnit implements TranslationUnitConstants {

        private static List<Element> clocks = null;
        private static Map<String, AbstractTIOSTS> models = null;
        private static Map<String, List<Integer>> typeTable = null;
        private static Map<String, List<Element>> paramTable = null;
        private static List<Token> gateIdentifiers = null;
        private static String specificationID = null;

    /**
     * Initializes the translation process
     * @param file The instantiated source
     * @param specName the name of the specification model
     */
        public static void init(BufferedInputStream file, String specName) {
                setUp();

                TranslationUnit.specificationID = specName;
                TranslationUnit parser = null;

                try {
                        parser = new TranslationUnit(file);
                        parser.systemRule();
                        SynthesisUnit.init();

                } catch (Exception e) {
                        e.printStackTrace();
                }
        }

        /**
	 * Initializes data structures responsible for checking and storage data 
	 */
        private static void setUp() {
                paramTable = new HashMap<String, List<Element>>();
                typeTable = new HashMap<String, List<Integer>>();
                clocks = new LinkedList<Element>();
                models = new LinkedHashMap<String, AbstractTIOSTS>();
                gateIdentifiers = new ArrayList<Token>();
        }

        /**
	 * Method used to get all {@link AbstractTIOSTS} models pre-compiled from source
	 */
        public static Map<String, AbstractTIOSTS> getModels() {
                return TranslationUnit.models;
        }

        /**
	 * Method used to get all action parameters found
	 */
        public static Map<String, List<Element>> getParamsTable() {
                return TranslationUnit.paramTable;
        }

    /**
	 * Method used to get all clocks definitions
	 */
        public static List<Element> getClocks() {
                return TranslationUnit.clocks;
        }

  void setInputAction(Token aux_tk1, AbstractTIOSTS  process) throws ParseException {
        AbstractAction action = new AbstractAction();
        action.setIdentifier(new Element(aux_tk1));
        action.setType(Constants.ACTION_INPUT);
        process.addInputAction(action);
  }

  void setOutputAction(Token aux_tk1, AbstractTIOSTS process) throws ParseException {
        AbstractAction action = new AbstractAction();
        action.setIdentifier(new Element(aux_tk1));
        action.setType(Constants.ACTION_OUTPUT);
        process.addOutputAction(action);
  }

  void setInternalAction(Token aux_tk1, AbstractTIOSTS process) throws ParseException {
        AbstractAction action = new AbstractAction();
        action.setIdentifier(new Element(aux_tk1));
        action.setType(Constants.ACTION_INTERNAL);
        process.addInternalAction(action);
  }

/* SYNTATICAL SPECIFICATION */
  final public Token binaryOperatorRule() throws ParseException {
        Token tk = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULT_TK:
      tk = jj_consume_token(MULT_TK);
      break;
    case MOD_TK:
      tk = jj_consume_token(MOD_TK);
      break;
    case DIV_TK:
      tk = jj_consume_token(DIV_TK);
      break;
    case EQUIV_TK:
      tk = jj_consume_token(EQUIV_TK);
      break;
    case AND_TK:
      tk = jj_consume_token(AND_TK);
      break;
    case OR_TK:
      tk = jj_consume_token(OR_TK);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return tk;}
    throw new Error("Missing return statement in function");
  }

  final public Token unaryOperatorRule() throws ParseException {
        Token tk = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS_TK:
      tk = jj_consume_token(PLUS_TK);
      break;
    case MINUS_TK:
      tk = jj_consume_token(MINUS_TK);
      break;
    case NOT_TK:
      tk = jj_consume_token(NOT_TK);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return tk;}
    throw new Error("Missing return statement in function");
  }

  final public Token clockOperatorRule() throws ParseException {
        Token tk = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MORETHEN_TK:
      tk = jj_consume_token(MORETHEN_TK);
      break;
    case MORETHENEQUALS_TK:
      tk = jj_consume_token(MORETHENEQUALS_TK);
      break;
    case EQUALS_TK:
      tk = jj_consume_token(EQUALS_TK);
      break;
    case LESSTHEN_TK:
      tk = jj_consume_token(LESSTHEN_TK);
      break;
    case LESSTHENEQUALS_TK:
      tk = jj_consume_token(LESSTHENEQUALS_TK);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return tk;}
    throw new Error("Missing return statement in function");
  }

  final public Token relationalOperatorRule() throws ParseException {
        Token aux_tk = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIFF_TK:
      aux_tk = jj_consume_token(DIFF_TK);
      break;
    case MORETHEN_TK:
    case MORETHENEQUALS_TK:
    case EQUALS_TK:
    case LESSTHEN_TK:
    case LESSTHENEQUALS_TK:
      aux_tk = clockOperatorRule();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return aux_tk;}
    throw new Error("Missing return statement in function");
  }

  final public Token constantBodyRule() throws ParseException {
        Token aux_tk = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE_TK:
      aux_tk = jj_consume_token(TRUE_TK);
      break;
    case FALSE_TK:
      aux_tk = jj_consume_token(FALSE_TK);
      break;
    case INTEGER:
      aux_tk = jj_consume_token(INTEGER);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return aux_tk;}
    throw new Error("Missing return statement in function");
  }

  final public void systemRule() throws ParseException {
        Token tk = null;
    jj_consume_token(SYSTEM_TK);
    tk = jj_consume_token(IDENTIFIER);
    jj_consume_token(57);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONST_TK:
      jj_consume_token(CONST_TK);
                  System.out.println("Warning: constant definitions are not implemented yet");
      label_1:
      while (true) {
        jj_consume_token(IDENTIFIER);
        jj_consume_token(EQUALS_TK);
        constantBodyRule();
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_1;
        }
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLOCKS_TK:
      jj_consume_token(CLOCKS_TK);
      tk = jj_consume_token(IDENTIFIER);
                  clocks.add(new Element(tk));
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 58:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_2;
        }
        jj_consume_token(58);
        tk = jj_consume_token(IDENTIFIER);
                                       clocks.add(new Element(tk));
      }
      jj_consume_token(57);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(GATE_TK);
    label_3:
    while (true) {
      gateRule();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_3;
      }
    }
    label_4:
    while (true) {
      processRule();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROCESS_TK:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_4;
      }
    }
    jj_consume_token(0);
  }

  final public void gateRule() throws ParseException {
        List<Integer> types = new ArrayList<Integer>();
        Token tk = null;
        int type = 0;
    tk = jj_consume_token(IDENTIFIER);
                          gateIdentifiers.add(tk);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPEN_PAR_TK:
      jj_consume_token(OPEN_PAR_TK);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT_TK:
      case BOOL_TK:
        type = primitiveTypeRule();
        types.add(new Integer(type));
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 58:
            ;
            break;
          default:
            jj_la1[11] = jj_gen;
            break label_5;
          }
          jj_consume_token(58);
          type = primitiveTypeRule();
          types.add(new Integer(type));
        }
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      jj_consume_token(CLOSE_PAR_TK);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    jj_consume_token(57);
                List<Integer> other = typeTable.put(tk.image, types);
                if (other != null) {
                        System.err.println("Error: Gate '" + tk.image +"' already exists");
                }
  }

  final public int primitiveTypeRule() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_TK:
      jj_consume_token(INT_TK);
                  {if (true) return Constants.TYPE_INTEGER;}
      break;
    case BOOL_TK:
      jj_consume_token(BOOL_TK);
               {if (true) return Constants.TYPE_BOOLEAN;}
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void processRule() throws ParseException {
        AbstractTransition trans = null;
        AbstractAction act = null;

        Token proc_tk = null;
        Token aux_tk1 = null;
        Token aux_tk2 = null;

        int type = 0;
    jj_consume_token(PROCESS_TK);
    proc_tk = jj_consume_token(IDENTIFIER);
    jj_consume_token(57);
        AbstractTIOSTS process = new AbstractTIOSTS(new Element(proc_tk));
        process.setIsSpecification(process.getName().equals(specificationID));
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INPUT_ACT_TK:
      jj_consume_token(INPUT_ACT_TK);
      aux_tk1 = jj_consume_token(IDENTIFIER);
                                       setInputAction(aux_tk1, process);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 58:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_6;
        }
        jj_consume_token(58);
        aux_tk2 = jj_consume_token(IDENTIFIER);
                                           setInputAction(aux_tk2, process);
      }
      jj_consume_token(57);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    jj_consume_token(OUTPUT_ACT_TK);
    aux_tk1 = jj_consume_token(IDENTIFIER);
                                       setOutputAction(aux_tk1, process);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 58:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_7;
      }
      jj_consume_token(58);
      aux_tk2 = jj_consume_token(IDENTIFIER);
                                            setOutputAction(aux_tk2, process);
    }
    jj_consume_token(57);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTERNAL_ACT_TK:
      jj_consume_token(INTERNAL_ACT_TK);
      aux_tk1 = jj_consume_token(IDENTIFIER);
                                       setInternalAction(aux_tk1, process);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 58:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_8;
        }
        jj_consume_token(58);
        aux_tk2 = jj_consume_token(IDENTIFIER);
                                            setInternalAction(aux_tk2, process);
      }
      jj_consume_token(57);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLES_TK:
      jj_consume_token(VARIABLES_TK);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_9;
        }
        aux_tk1 = jj_consume_token(IDENTIFIER);
        jj_consume_token(59);
        type = primitiveTypeRule();
        jj_consume_token(57);
                 process.addVariable(new TypedElement(aux_tk1, type));
      }
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    jj_consume_token(STATE_TK);
    label_10:
    while (true) {
      stateDeclarationRule(process);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INIT_STATE_TK:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_10;
      }
    }
    jj_consume_token(TRANSITION_TK);
    label_11:
    while (true) {
      trans = transitionRule();
                                                   process.addTransition(trans);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FROM_TK:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_11;
      }
    }
                List<TypedElement> actparams = new ArrayList<TypedElement>();
                for (Token gate_tk : gateIdentifiers) {
                        List<Element> params = paramTable.get(gate_tk.image);
                        List<Integer> types = typeTable.get(gate_tk.image);
                        if (params != null && types != null) {
                                for (int i = 0; i < params.size(); i++) {
                                        TypedElement te = new TypedElement(params.get(i).getToken(), types.get(i));
                                        if (!actparams.contains(te)) {
                                                actparams.add(te);
                                        }
                                }
                        }
                }
                for (TypedElement tp : actparams) {
                        process.addParameter(tp);
                }
                process.finishProcess();
                models.put(process.getName(), process);
  }

  final public void stateDeclarationRule(AbstractTIOSTS proc) throws ParseException {
        Token state_tk = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INIT_STATE_TK:
      jj_consume_token(INIT_STATE_TK);
      jj_consume_token(59);
      state_tk = jj_consume_token(IDENTIFIER);
      jj_consume_token(57);
                                                        proc.addState(new StateElement(state_tk, true));
      break;
    case IDENTIFIER:
      state_tk = jj_consume_token(IDENTIFIER);
      jj_consume_token(57);
                                    proc.addState(new StateElement(state_tk, false));
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public AbstractTransition transitionRule() throws ParseException {
        Set<AbstractExpression> assignments = null;
        AbstractTransition trans = null;
        AbstractExpression expr = null;
        AbstractAction act = null;
        Token tk_id = null;
        String deadlineType = null;
    jj_consume_token(FROM_TK);
    tk_id = jj_consume_token(IDENTIFIER);
                  trans = new AbstractTransition(tk_id.beginLine);
                  trans.setSource(new Element(tk_id));
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHEN_TK:
      expr = clockGuardRule();
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
                 trans.setClockGuard(expr);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF_TK:
      expr = dataGuardRule();
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
                 trans.setDataGuard(expr);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SYNK_TK:
      act = actionRule();
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
                 trans.setAction(act);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DO_TK:
      assignments = statementRule();
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
                 trans.setAssignments(assignments);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEADLINE_TK:
      jj_consume_token(DEADLINE_TK);
      deadlineType = deadlineTypeRule();
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
                  trans.setDeadline(deadlineType);
    jj_consume_token(TO_TK);
    tk_id = jj_consume_token(IDENTIFIER);
    jj_consume_token(57);
                                         trans.setDestination(new Element(tk_id));
         {if (true) return trans;}
    throw new Error("Missing return statement in function");
  }

  final public Set<AbstractExpression> statementRule() throws ParseException {
        Set<AbstractExpression> assignments = new LinkedHashSet<AbstractExpression>();
    jj_consume_token(DO_TK);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      assignmentRule(assignments);
      break;
    case 60:
      assignmentSetRule(assignments);
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return assignments;}
    throw new Error("Missing return statement in function");
  }

  final public void assignmentRule(Set<AbstractExpression> assignments) throws ParseException {
        AbstractExpression expr = null;
        Token aux = null;
    aux = jj_consume_token(IDENTIFIER);
                Element e = new Element(aux);
                if (clocks.contains(e)) {
                        expr = new AbstractExpression(true);
                } else {
                        expr = new AbstractExpression();
                }
                expr.addElement(e);
    aux = jj_consume_token(ASSIGNMENT);
                           expr.addElement(new Element(aux));
    expressionRule(expr);
          assignments.add(expr);
  }

  final public void assignmentSetRule(Set<AbstractExpression> assignments) throws ParseException {
    jj_consume_token(60);
    assignmentRule(assignments);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 61:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_12;
      }
      jj_consume_token(61);
      assignmentRule(assignments);
    }
    jj_consume_token(62);
  }

  final public AbstractExpression clockGuardRule() throws ParseException {
        AbstractExpression expr = new AbstractExpression();

        Token clock_tk = null;
        Token time_tk = null;
        Token op_tk = null;
        Token aux = null;
    jj_consume_token(WHEN_TK);
    clock_tk = jj_consume_token(IDENTIFIER);
    op_tk = clockOperatorRule();
    time_tk = jj_consume_token(INTEGER);
                  expr.addElement(new Element(clock_tk)); expr.addElement(new Element(op_tk));
                  expr.addElement(new Element(time_tk));
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND_TK:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_13;
      }
      aux = jj_consume_token(AND_TK);
      clock_tk = jj_consume_token(IDENTIFIER);
      op_tk = clockOperatorRule();
      time_tk = jj_consume_token(INTEGER);
                  expr.addElement(new Element(aux)); expr.addElement(new Element(clock_tk));
          expr.addElement(new Element(op_tk));
          expr.addElement(new Element(time_tk));
    }
     {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public AbstractExpression dataGuardRule() throws ParseException {
        AbstractExpression expr = new AbstractExpression();
    jj_consume_token(IF_TK);
    expressionRule(expr);
          {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public AbstractAction actionRule() throws ParseException {
        AbstractAction act = new AbstractAction();
        Token aux_tk = null;
    jj_consume_token(SYNK_TK);
    aux_tk = jj_consume_token(IDENTIFIER);
                                        act.setIdentifier(new Element(aux_tk));
                  act.setType(Constants.ACTION_INTERNAL);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INACT_TK:
    case OUTACT_TK:
    case OPEN_PAR_TK:
      otherActionRule(act);
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
         {if (true) return act;}
    throw new Error("Missing return statement in function");
  }

  final public void otherActionRule(AbstractAction act) throws ParseException {
        Token aux = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INACT_TK:
    case OUTACT_TK:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INACT_TK:
        jj_consume_token(INACT_TK);
                        act.setType(Constants.ACTION_INPUT);
        break;
      case OUTACT_TK:
        jj_consume_token(OUTACT_TK);
                                act.setType(Constants.ACTION_OUTPUT);
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    jj_consume_token(OPEN_PAR_TK);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      aux = jj_consume_token(IDENTIFIER);
                                     act.addParameter(new Element(aux));
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 58:
          ;
          break;
        default:
          jj_la1[36] = jj_gen;
          break label_14;
        }
        jj_consume_token(58);
        aux = jj_consume_token(IDENTIFIER);
                                                 act.addParameter(new Element(aux));
      }
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
                if (typeTable.containsKey(act.getName())) {
                        List<Element> other = paramTable.put(act.getName(), act.getParameters());
                        if (other != null && !other.equals(act.getParameters()))
                                System.err.println("Error: Action '"+act.getName()+"' has been already defined");
                } else {

                        System.err.println("Error: Action '" +act.getName()+"' has not been declared as a gate");
                }
    jj_consume_token(CLOSE_PAR_TK);
  }

  final public String deadlineTypeRule() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DELAYABLE_TK:
      jj_consume_token(DELAYABLE_TK);
                        {if (true) return Constants.DEADLINE_DELAYABLE;}
      break;
    case EAGER_TK:
      jj_consume_token(EAGER_TK);
                 {if (true) return Constants.DEADLINE_EAGER;}
      break;
    case LAZY_TK:
      jj_consume_token(LAZY_TK);
               {if (true) return Constants.DEADLINE_LAZY;}
      break;
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void expressionRule(AbstractExpression expr) throws ParseException {
    termRule(expr);
    otherExpressionRule(expr);
  }

  final public void otherExpressionRule(AbstractExpression expr) throws ParseException {
        Token aux = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS_TK:
      aux = jj_consume_token(PLUS_TK);
                         expr.addElement(new Element(aux));
      termRule(expr);
      otherExpressionRule(expr);
      break;
    case MINUS_TK:
      aux = jj_consume_token(MINUS_TK);
                         expr.addElement(new Element(aux));
      termRule(expr);
      otherExpressionRule(expr);
      break;
    default:
      jj_la1[39] = jj_gen;

    }
  }

  final public void termRule(AbstractExpression expr) throws ParseException {
    factorRule(expr);
    otherTermRule(expr);
  }

  final public void otherTermRule(AbstractExpression expr) throws ParseException {
        Token aux = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MORETHEN_TK:
    case MORETHENEQUALS_TK:
    case EQUALS_TK:
    case LESSTHEN_TK:
    case LESSTHENEQUALS_TK:
    case DIFF_TK:
      aux = relationalOperatorRule();
                                        expr.addElement(new Element(aux));
      termRule(expr);
      otherExpressionRule(expr);
      break;
    case MINUS_TK:
    case NOT_TK:
    case PLUS_TK:
    case TRUE_TK:
    case FALSE_TK:
    case OPEN_PAR_TK:
    case IDENTIFIER:
    case INTEGER:
      factorRule(expr);
      otherTermRule(expr);
      break;
    case EQUIV_TK:
    case AND_TK:
    case MULT_TK:
    case OR_TK:
    case MOD_TK:
    case DIV_TK:
      aux = binaryOperatorRule();
                                    expr.addElement(new Element(aux));
      factorRule(expr);
      otherTermRule(expr);
      break;
    default:
      jj_la1[40] = jj_gen;

    }
  }

  final public void factorRule(AbstractExpression expr) throws ParseException {
        Token aux = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      aux = jj_consume_token(IDENTIFIER);
                           expr.addElement(new Element(aux));
      break;
    case TRUE_TK:
    case FALSE_TK:
    case INTEGER:
      aux = constantBodyRule();
                                 expr.addElement(new Element(aux));
      break;
    case MINUS_TK:
    case NOT_TK:
    case PLUS_TK:
      aux = unaryOperatorRule();
                                  expr.addElement(new Element(aux));
      expressionRule(expr);
      break;
    case OPEN_PAR_TK:
      aux = jj_consume_token(OPEN_PAR_TK);
                            expr.addElement(new Element(aux));
      expressionRule(expr);
      aux = jj_consume_token(CLOSE_PAR_TK);
                             expr.addElement(new Element(aux));
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /** Generated Token Manager. */
  public TranslationUnitTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[42];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xf480000,0xb00000,0x3e000,0x7e000,0x30000000,0x0,0x100,0x0,0x200,0x0,0x40000000,0x0,0x1800,0x0,0x1800,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x900000,0x3fffe000,0x30b00000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x400000,0x200000,0x0,0x4000000,0x0,0x200000,0x0,0x4000000,0x0,0x80000,0x0,0x4000000,0x0,0x4000000,0x4000000,0x2,0x200000,0x4,0x200020,0x40,0x200020,0x200,0x400,0x800,0x20000,0x80,0x10200000,0x20000000,0x0,0x83000,0x3000,0x3000,0x4000000,0x200000,0x1c000,0x0,0x680000,0x680000,};
   }

  /** Constructor with InputStream. */
  public TranslationUnit(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public TranslationUnit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new TranslationUnitTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public TranslationUnit(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new TranslationUnitTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public TranslationUnit(TranslationUnitTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(TranslationUnitTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[63];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 42; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 63; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
